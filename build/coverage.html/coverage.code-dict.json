{"/home/travis/build/npmtest/node-npmtest-image-diff/test.js":"/* istanbul instrument in package npmtest_image_diff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-image-diff/lib.npmtest_image_diff.js":"/* istanbul instrument in package npmtest_image_diff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_image_diff = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_image_diff = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-image-diff/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-image-diff && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_image_diff */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_image_diff\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_image_diff.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_image_diff.rollup.js'] =\n            local.assetsDict['/assets.npmtest_image_diff.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_image_diff.__dirname + '/lib.npmtest_image_diff.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-image-diff/node_modules/image-diff/lib/image-diff.js":"// Load in our dependencies\nvar assert = require('assert');\nvar fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar gm = require('gm').subClass({imageMagick: true});\nvar bufferedSpawn = require('buffered-spawn');\nvar mkdirp = require('mkdirp');\nvar tmp = require('tmp');\n\n// DEV: If we want to restructure away from a class\n//   I (@twolfson) suggest writing to `exports` (e.g. `exports.getBooleanResult`, `exports.getFullResult`)\n//   then making `module.exports = _.extend(exports.getBooleanResult, exports);`\n\n// Define custom resize function\nfunction transparentExtent(gm, params) {\n  // Assert we received our parameters\n  assert.notEqual(params.width, undefined);\n  assert.notEqual(params.height, undefined);\n\n  // Fill in new space with white background\n  // TODO: Parameterize background color (should be considered 'transparent' color in this case)\n  gm.background('transparent');\n\n  // Anchor image to upper-left\n  // TODO: Parameterize anchor point\n  gm.gravity('NorthWest');\n\n  // Specify new image size\n  gm.extent(params.width, params.height);\n\n  // Return gm instance for a fluent interface\n  return gm;\n}\n\nfunction ImageDiff() {\n}\nImageDiff.getImageSize = function (filepath, cb) {\n  // TODO: This could be done via pngjs but stick to imagemagick for now\n  fs.stat(filepath, function (err, stats) {\n    // If the file does not exist, callback with info\n    if (err) {\n      if (err.code === 'ENOENT') {\n        return cb(null, null);\n      } else {\n        return cb(err);\n      }\n    }\n\n    gm(filepath).size(function (err, value) {\n      if (err) {\n        return cb(err);\n      }\n      cb(null, value);\n    });\n  });\n};\nImageDiff.extractDifference = function (output) {\n  // Attempt to find variant between 'all: 0 (0)', 'all: 40131.8 (0.612372)', or 'all: 0.460961 (7.03381e-06)'\n  // DEV: According to http://www.imagemagick.org/discourse-server/viewtopic.php?f=1&t=17284\n  // DEV: These values are the total square root mean square (RMSE) pixel difference across all pixels and its percentage\n  // TODO: This is not very multi-lengual =(\n  var resultInfo = output.match(/all: (\\d+(?:\\.\\d+)?(?:[Ee]-?\\d+)?) \\((\\d+(?:\\.\\d+)?(?:[Ee]-?\\d+)?)\\)/);\n  if (!resultInfo) {\n    throw new Error('Expected output to contain \\'all\\' but received \"' + output + '\"');\n  }\n  return {\n    total: parseFloat(resultInfo[1], 10),\n    percentage: parseFloat(resultInfo[2], 10)\n  };\n};\nImageDiff.createDiff = function (options, cb) {\n  // http://www.imagemagick.org/script/compare.php\n  var diffCmd = 'compare';\n  var diffArgs = [\n    '-verbose',\n    // TODO: metric and highlight could become constructor options\n    '-metric', 'RMSE',\n    '-highlight-color', 'RED']\n    // Shadow options if options.shadow is set\n    .concat(options.shadow ? [] : ['-compose', 'Src'])\n    // Paths to actual, expected, and diff images\n    .concat([\n    options.actualPath,\n    options.expectedPath,\n    // If there is no output image, then output to `stdout` (which is ignored)\n    options.diffPath || '-'\n  ]);\n  // Ignore `stdin` and `stdout` (useful for ignoring when images are being sent to stdout)\n  var spawnOptions = {stdio: ['ignore', 'ignore', 'pipe']};\n  bufferedSpawn(diffCmd, diffArgs, spawnOptions, function processDiffOutput (err, stdout, stderr) {\n    // If we failed with no info, callback\n    if (err && !stderr) {\n      return cb(err);\n    }\n\n    // Callback with raw result\n    return cb(null, stderr);\n  });\n};\nImageDiff.prototype = {\n  rawDiff: function (options, callback) {\n    // TODO: Break this down more...\n    var actualPath = options.actualImage;\n    var expectedPath = options.expectedImage;\n    var diffPath = options.diffImage;\n    var shadow = options.shadow;\n\n    // Assert our options are passed in\n    if (!actualPath) {\n      return process.nextTick(function () {\n        callback(new Error('`options.actualPath` was not passed to `image-diff`'));\n      });\n    }\n    if (!expectedPath) {\n      return process.nextTick(function () {\n        callback(new Error('`options.expectedPath` was not passed to `image-diff`'));\n      });\n    }\n\n    var actualTmpPath;\n    var expectedTmpPath;\n    var rawResult;\n    async.waterfall([\n      function assertActualPathExists (cb) {\n        fs.exists(actualPath, function handleActualExists (actualExists) {\n          if (actualExists) {\n            cb();\n          } else {\n            cb(new Error('`image-diff` expected \"' + actualPath + '\" to exist but it didn\\'t'));\n          }\n        });\n      },\n      function collectImageSizes (cb) {\n        // Collect the images sizes\n        async.map([actualPath, expectedPath], ImageDiff.getImageSize, cb);\n      },\n      function resizeImages (sizes, cb) {\n        // Find the maximum dimensions\n        var actualSize = sizes[0];\n        var expectedSize = sizes[1] || {doesNotExist: true, height: 0, width: 0};\n        var maxHeight = Math.max(actualSize.height, expectedSize.height);\n        var maxWidth = Math.max(actualSize.width, expectedSize.width);\n\n        // Resize both images\n        async.parallel([\n          function resizeActualImage (cb) {\n            // Get a temporary filepath\n            tmp.tmpName({postfix: '.png'}, function (err, filepath) {\n              // If there was an error, callback\n              if (err) {\n                return cb(err);\n              }\n\n              // Otherwise, resize the image\n              actualTmpPath = filepath;\n              transparentExtent(gm(actualPath), {\n                width: maxWidth,\n                height: maxHeight\n              }).write(actualTmpPath, cb);\n            });\n          },\n          function resizeExpectedImage (cb) {\n            tmp.tmpName({postfix: '.png'}, function (err, filepath) {\n              // If there was an error, callback\n              if (err) {\n                return cb(err);\n              }\n\n              // If there was no expected image, create a transparent image to compare against\n              expectedTmpPath = filepath;\n              if (expectedSize.doesNotExist) {\n                gm(maxWidth, maxHeight, 'transparent').write(expectedTmpPath, cb);\n              // Otherwise, resize the image\n              } else {\n                transparentExtent(gm(expectedPath), {\n                  width: maxWidth,\n                  height: maxHeight\n                }).write(expectedTmpPath, cb);\n              }\n            });\n          }\n        ], cb);\n      },\n      function createDiffDirectory (/*..., cb*/) {\n        var cb = [].slice.call(arguments, -1)[0];\n        if (diffPath) {\n          mkdirp(path.dirname(diffPath), function (err) {\n            cb(err);\n          });\n        } else {\n          process.nextTick(cb);\n        }\n      },\n      function createDiff (cb) {\n        ImageDiff.createDiff({\n          actualPath: actualTmpPath,\n          expectedPath: expectedTmpPath,\n          diffPath: diffPath,\n          shadow: shadow\n        }, function saveResult (err, _rawResult) {\n          rawResult = _rawResult;\n          cb(err);\n        });\n      }\n    ], function cleanup (err) {\n      // Clean up the temporary files\n      var cleanupPaths = [actualTmpPath, expectedTmpPath].filter(function (filepath) {\n        return !!filepath;\n      });\n      async.forEach(cleanupPaths, function cleanupFile (filepath, cb) {\n        fs.unlink(filepath, cb);\n      }, function callOriginalCallback (_err) {\n        // Callback with the raw result\n        callback(err, rawResult);\n      });\n    });\n  },\n  fullDiff: function (options, cb) {\n    // Create a raw diff\n    this.rawDiff(options, function handleRawDiff (err, rawResult) {\n      // If there was an error, callback with it\n      if (err) {\n        return cb(err);\n      }\n\n      // Otherwise, parse the result and callback\n      cb(null, ImageDiff.extractDifference(rawResult));\n    });\n  },\n  diff: function (options, cb) {\n    // Create a full diff\n    this.fullDiff(options, function handleFullDiff (err, difference) {\n      // If there was an error, callback with it\n      if (err) {\n        return cb(err);\n      }\n\n      // Otherwise, validate the difference and callback\n      cb(null, difference.total === 0);\n    });\n  }\n};\n\n// Create helper utilities\nfunction imageDiff(options, cb) {\n  var differ = new ImageDiff();\n  differ.diff(options, cb);\n}\nimageDiff.getFullResult = function (options, cb) {\n  var differ = new ImageDiff();\n  differ.fullDiff(options, cb);\n};\nimageDiff.getRawResult = function (options, cb) {\n  var differ = new ImageDiff();\n  differ.rawDiff(options, cb);\n};\n\n// Export the original class and helper\nimageDiff.ImageDiff = ImageDiff;\nmodule.exports = imageDiff;\n","/home/travis/build/npmtest/node-npmtest-image-diff/node_modules/image-diff/Gruntfile.js":"module.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      files: ['Gruntfile.js', 'lib/**/*.js', 'test/**/*.js'],\n      jshintrc: '.jshintrc'\n    },\n    watch: {\n      'default': {\n        files: '<%= jshint.files %>',\n        tasks: ['default']\n      }\n    }\n  });\n\n  // Load in grunt tasks\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  // Default task.\n  grunt.registerTask('default', ['jshint']);\n\n};\n"}